################################################################################
# Blanpa Vorlage
################################################################################
# 
# 
################################################################################
version: '3'

volumes: 
  grafana_data: {}

networks:
  front-tier:
  back-tier:

services:
  mqtt-broker:
    image: hivemq/hivemq4
    ports:
      - 1883:1883
      #- 8883:8883
    volumes:
      - ./certs:/opt/hivemq/certs
    environment:      
      - MQTT_USERNAME=user
      - MQTT_PASSWORD=simplefactoryserverstack
      # - HIVE_MQ_LICENSE_FILE=/opt/hivemq/license/license.lic
      # - HIVE_MQ_BIND_ADDRESS=0.0.0.0
      # - HIVE_MQ_WEB_UI_HTTP_BIND_ADDRESS=0.0.0.0
      # - HIVE_MQ_WEB_UI_HTTPS_BIND_ADDRESS=0.0.0.0
      # - HIVE_MQ_CONTROL_CENTER_BIND_ADDRESS=0.0.0.0
    restart: always

  node-red:
    image: nodered/node-red
    environment:
      - NODE_RED_USERNAME=user
      - NODE_RED_PASSWORD=simplefactoryserverstack
    ports:
      - 1880:1880
    volumes:
      - ./node-red:/data
    restart: always
    network_mode: host
    privileged: true
    group_add:
    - dialout

  timescaledb:
    image: timescale/timescaledb
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=simplefactoryserverstack
    volumes:
      - ./timescaledb:/var/lib/postgresql/data
    restart: always

  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=simplefactoryserverstack
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
    restart: always

  adminer:
    image: adminer
    environment:
      - ADMINER_DESIGN_USERNAME=user
      - ADMINER_DESIGN_PASSWORD=simplefactoryserverstack
    ports:
      - 8080:8080
    restart: always

  portainer:
    image: portainer/portainer
    environment:
      - ADMIN_USERNAME=user
      - ADMIN_PASSWORD=simplefactoryserverstack
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
